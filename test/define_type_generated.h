// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEFINETYPE_TEST_IDL_H_
#define FLATBUFFERS_GENERATED_DEFINETYPE_TEST_IDL_H_

#include "flatbuffers/flatbuffers.h"

namespace test {
namespace idl {

struct TestRequest;

struct UnionRequest;

enum Command {
  Command_NONE = 0,
  Command_TestRequest = 1,
  Command_MIN = Command_NONE,
  Command_MAX = Command_TestRequest
};

inline Command (&EnumValuesCommand())[2] {
  static Command values[] = {
    Command_NONE,
    Command_TestRequest
  };
  return values;
}

inline const char **EnumNamesCommand() {
  static const char *names[] = {
    "NONE",
    "TestRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameCommand(Command e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesCommand()[index];
}

template<typename T> struct CommandTraits {
  static const Command enum_value = Command_NONE;
};

template<> struct CommandTraits<TestRequest> {
  static const Command enum_value = Command_TestRequest;
};

bool VerifyCommand(flatbuffers::Verifier &verifier, const void *obj, Command type);
bool VerifyCommandVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct TestRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_AGE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t age() const {
    return GetField<uint32_t>(VT_AGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint32_t>(verifier, VT_AGE) &&
           verifier.EndTable();
  }
};

struct TestRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TestRequest::VT_NAME, name);
  }
  void add_age(uint32_t age) {
    fbb_.AddElement<uint32_t>(TestRequest::VT_AGE, age, 0);
  }
  TestRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestRequestBuilder &operator=(const TestRequestBuilder &);
  flatbuffers::Offset<TestRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestRequest> CreateTestRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t age = 0) {
  TestRequestBuilder builder_(_fbb);
  builder_.add_age(age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<TestRequest> CreateTestRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t age = 0) {
  return test::idl::CreateTestRequest(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      age);
}

struct UnionRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CMD_TYPE = 4,
    VT_CMD = 6
  };
  Command cmd_type() const {
    return static_cast<Command>(GetField<uint8_t>(VT_CMD_TYPE, 0));
  }
  const void *cmd() const {
    return GetPointer<const void *>(VT_CMD);
  }
  template<typename T> const T *cmd_as() const;
  const TestRequest *cmd_as_TestRequest() const {
    return cmd_type() == Command_TestRequest ? static_cast<const TestRequest *>(cmd()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CMD_TYPE) &&
           VerifyOffset(verifier, VT_CMD) &&
           VerifyCommand(verifier, cmd(), cmd_type()) &&
           verifier.EndTable();
  }
};

template<> inline const TestRequest *UnionRequest::cmd_as<TestRequest>() const {
  return cmd_as_TestRequest();
}

struct UnionRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd_type(Command cmd_type) {
    fbb_.AddElement<uint8_t>(UnionRequest::VT_CMD_TYPE, static_cast<uint8_t>(cmd_type), 0);
  }
  void add_cmd(flatbuffers::Offset<void> cmd) {
    fbb_.AddOffset(UnionRequest::VT_CMD, cmd);
  }
  UnionRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UnionRequestBuilder &operator=(const UnionRequestBuilder &);
  flatbuffers::Offset<UnionRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UnionRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<UnionRequest> CreateUnionRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    Command cmd_type = Command_NONE,
    flatbuffers::Offset<void> cmd = 0) {
  UnionRequestBuilder builder_(_fbb);
  builder_.add_cmd(cmd);
  builder_.add_cmd_type(cmd_type);
  return builder_.Finish();
}

inline bool VerifyCommand(flatbuffers::Verifier &verifier, const void *obj, Command type) {
  switch (type) {
    case Command_NONE: {
      return true;
    }
    case Command_TestRequest: {
      auto ptr = reinterpret_cast<const TestRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyCommandVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCommand(
        verifier,  values->Get(i), types->GetEnum<Command>(i))) {
      return false;
    }
  }
  return true;
}

inline const test::idl::UnionRequest *GetUnionRequest(const void *buf) {
  return flatbuffers::GetRoot<test::idl::UnionRequest>(buf);
}

inline bool VerifyUnionRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test::idl::UnionRequest>(nullptr);
}

inline void FinishUnionRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::idl::UnionRequest> root) {
  fbb.Finish(root);
}

}  // namespace idl
}  // namespace test

#endif  // FLATBUFFERS_GENERATED_DEFINETYPE_TEST_IDL_H_
